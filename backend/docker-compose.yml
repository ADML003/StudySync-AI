version: "3.8"

services:
  # FastAPI Backend Service
  studysync-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development # Use development stage for local development
    container_name: studysync-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://studysync:studysync123@postgres:5432/studysync_db
      - REDIS_URL=redis://redis:6379/0
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app # Mount source code for development
      - studysync-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - studysync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: studysync-postgres
    environment:
      - POSTGRES_DB=studysync_db
      - POSTGRES_USER=studysync
      - POSTGRES_PASSWORD=studysync123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432" # Expose for external access (development only)
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./quick_setup.sql:/docker-entrypoint-initdb.d/02-setup.sql:ro
    networks:
      - studysync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U studysync -d studysync_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: studysync-redis
    ports:
      - "6379:6379" # Expose for external access (development only)
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - studysync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: studysync-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - studysync-logs:/var/log/nginx
    depends_on:
      - studysync-backend
    networks:
      - studysync-network
    restart: unless-stopped
    profiles:
      - production # Only start with --profile production

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: studysync-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - studysync-network
    restart: unless-stopped
    profiles:
      - monitoring # Only start with --profile monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: studysync-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - studysync-network
    restart: unless-stopped
    profiles:
      - monitoring # Only start with --profile monitoring

# Named Volumes for Data Persistence
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  studysync-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Custom Network
networks:
  studysync-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
