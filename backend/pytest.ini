[tool:pytest]
# Pytest configuration for StudySync AI backend tests

# Test discovery
testpaths = .
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test output and reporting
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --color=yes
    --durations=10
    --cov=.
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-fail-under=80

# Test markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    auth: marks tests related to authentication
    database: marks tests requiring database
    chains: marks tests for AI chain functionality
    routes: marks tests for API route functionality
    mock: marks tests that use mocking extensively

# Minimum Python version
minversion = 3.8

# Test timeout (in seconds)
timeout = 300

# Asyncio configuration
asyncio_mode = auto

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Test environment variables
env =
    TESTING = true
    LOG_LEVEL = DEBUG
    ENVIRONMENT = test

# Test collection
collect_ignore = [
    "setup.py",
    "build",
    "dist",
    ".git",
    ".pytest_cache",
    "__pycache__",
    "*.egg-info"
]

# Coverage configuration
[coverage:run]
source = .
omit = 
    test_*.py
    *_test.py
    conftest.py
    setup.py
    .venv/*
    venv/*
    */site-packages/*
    __pycache__/*
    .git/*
    build/*
    dist/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\bProtocol\b.*\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov